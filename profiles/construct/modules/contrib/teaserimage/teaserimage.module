<?php

/**
 * @file
 * A module that allows thumbnail generation for teasers from pictures attached
 * to the nodes(this option will be removed in the near future) or inserted in their body.
 */

/**
 * Displays module settings page.
 */
function teaserimage_admin_settings($form, &$form_state) {
  $form['default_thumbnail_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default thumbnail settings'),
    '#description' => t('These settings will apply to any selected content type but can be overriden by type specific settings.'),
  );

  $presets = image_style_options(TRUE);

  $form['default_thumbnail_settings']['teaserimage_preset'] = array(
    '#type' => 'select',
    '#title' => t('Thumbnail preset'),
    '#default_value' => variable_get('teaserimage_preset', ''),
    '#description' => t('An Image module style preset for building the thumbnails.'),
    '#options' => $presets,
    '#required' => TRUE,
  );

  $form['default_thumbnail_settings']['teaserimage_min_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum height'),
    '#default_value' => variable_get('teaserimage_min_height', ''),
    '#description' => t('Minimum height a picture should have to be used as a thumbnail.'),
    '#maxlength' => '50',
    '#size' => '50',
  );

  $form['default_thumbnail_settings']['teaserimage_min_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum width'),
    '#default_value' => variable_get('teaserimage_min_width', ''),
    '#description' => t('Minimum width a picture should have to be used as a thumbnail.'),
    '#maxlength' => '50',
    '#size' => '50',
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function teaserimage_form_node_type_form_alter(&$form, $form_state) {

  $form['teaserimage'] = array(
    '#group' => 'additional_settings',
    '#type' => 'fieldset',
    '#title' => t('Teaser Image'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#attached' => array(
      'js' => array(
        'vertical-tabs' => drupal_get_path('module', 'teaserimage') . '/teaserimage.js',
      ),
    ),
  );

  $form['teaserimage']['teaserimage'] = array(
    '#type' => 'radios',
    '#title' => t('Generate thumbnail'),
    '#default_value' => variable_get('teaserimage_' . $form['#node_type']->type, 0),
    '#options' => array(t('Disabled'), t('Enabled')),
    '#description' => t('Enable to use Teaser Image functionalities.'),
  );

  if (module_exists('file')) {
    $form['teaserimage']['teaserimage_imagefield'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use image from attached image-field(s) if not found in node body'),
      '#default_value' => variable_get('teaserimage_imagefield_' . $form['#node_type']->type, 0),
      '#description' => t('If checked, the thumbnail may be built from image-field if possible(and if not found in node body) as well for teasers and RSS feeds (not views fields).'),
    );
  }

  $form['teaserimage']['teaserimage_teaser'] = array(
    '#type' => 'radios',
    '#title' => t('Teaser display'),
    '#default_value' => variable_get('teaserimage_teaser_' . $form['#node_type']->type, 1),
    '#options' => array(
      t('Disabled'),
      t('Before the teaser body.'),
      t('After the teaser body.'),
    ),
    '#description' => t('Use this setting to display the thumbnail in the teaser. If disabled you can still use the thumbnail in views, templates...'),
  );

  $form['teaserimage']['teaserimage_rss'] = array(
    '#type' => 'radios',
    '#title' => t('RSS display'),
    '#default_value' => variable_get('teaserimage_rss_' . $form['#node_type']->type, 1),
    '#options' => array(t('Disabled'), t('Before the rss body.'), t('After the rss body.')),
    '#description' => t('Use this setting to display the thumbnail in the RSS feeds. If disabled you can still use the thumbnail in views, templates...'),
  );

  $form['teaserimage']['teaserimage_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display thumbnail as link'),
    '#default_value' => variable_get('teaserimage_link_' . $form['#node_type']->type, 1),
    '#description' => t('Use this setting to display the thumbnail as a link in teasers and RSS feeds.'),
  );

  $form['teaserimage']['teaserimage_align'] = array(
    '#type' => 'radios',
    '#title' => t('Thumbnail alignment'),
    '#default_value' => variable_get('teaserimage_align_' . $form['#node_type']->type, 0),
    '#options' => array(t('None'), t('Left'), t('Right')),
    '#description' => t('This setting will add an "align" attribute to the thumbnail inin teasers and RSS feeds.'),
  );

  $presets = image_style_options(TRUE);

  $form['teaserimage']['teaserimage_preset'] = array(
    '#type' => 'select',
    '#title' => t('Thumbnail preset'),
    '#default_value' => variable_get('teaserimage_preset_' . $form['#node_type']->type, 0),
    '#options' => $presets,
    '#description' => t('The image style you want to use to build the thumbnail. If blank, the default preset (define in the settings page) will be used.'),
  );

  $form['teaserimage']['teaserimage_min_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum height'),
    '#default_value' => variable_get('teaserimage_min_height_' . $form['#node_type']->type, ''),
    '#maxlength' => '50',
    '#size' => '10',
    '#description' => t('The minimum height (in px) for a picture to be used as a thumbnail. If blank, the default preset (define in the settings page) will be used.'),
  );

  $form['teaserimage']['teaserimage_min_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum width'),
    '#default_value' => variable_get('teaserimage_min_width' . $form['#node_type']->type, ''),
    '#maxlength' => '50',
    '#size' => '10',
    '#description' => t('The minimum width (in px) for a picture to be used as a thumbnail. If blank, the default preset (define in the settings page) will be used.'),
  );
}

/**
 * Implements hook_menu().
 */
function teaserimage_menu() {
  $items['admin/config/media/teaserimage'] = array(
    'title' => 'Teaser Image',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('teaserimage_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Define thumbnails related settings : size, types, preset.',
  );

  return $items;
}

function teaserimage_node_insert($node) {
  if (variable_get('teaserimage_' . $node->type, 0)) {
    _teaserimage_process($node);
  }
}

function teaserimage_node_update($node) {
  teaserimage_node_insert($node);
}

function teaserimage_node_delete($node) {
  if (variable_get('teaserimage_' . $node->type, 0)) {
    _teaserimage_delete_thumb($node->nid);
  }
}

function teaserimage_node_load($nodes) {
  foreach ($nodes as $node) {
    if (variable_get('teaserimage_' . $node->type, 0)) {
      $node->teaserimage = _teaserimage_get_thumbnail_source($node);
    }
  }
}

function teaserimage_theme() {
  return array(
    'teaserimage_thumbnail' => array(
      'variables' => array(
        'node' => NULL,
        'attributes' => NULL,
      ),
    ),
  );
}

/**
 * Output the thumbnail picture
 */
function theme_teaserimage_thumbnail($vars) {
  $node = $vars['node'];
  $thumbnail = $node->teaserimage;

  // We define if we prepend a thumbnail to the teaser
  if (!empty($thumbnail)) {
    $preset = variable_get('teaserimage_preset_' . $node->type, '');
    $preset = empty($preset) ? variable_get('teaserimage_preset', '') : $preset;

    $thumbnail_options = array(
      'style_name' => $preset,
      'path' => $thumbnail,
      'alt' => $node->title,
      'title' => $node->title,
      'attributes' => $vars['attributes'],
      'getsize' => FALSE,
    );
    $thumbnail = theme('image_style', $thumbnail_options);
  }

  return $thumbnail;
}

/**
 * Delete any thumbnail reference in the db for the specified node.
 */
function _teaserimage_delete_thumb($nid) {
  $db_img = db_query("SELECT * FROM {teaserimage} WHERE nid = :nid", array(':nid' => $nid))->fetchObject();
  if ($db_img) {
    if (!$db_img->from_attach) {
      image_path_flush($db_img->filepath);
    }
    db_delete('teaserimage')->condition('nid', $db_img->nid)->execute();
  }
}

function teaserimage_node_view($node, $view_mode) {
  if (variable_get('teaserimage_' . $node->type, 0)) {
    $body = &$node->content['body'][0]['#markup'];
    switch ($view_mode) {
      case 'teaser':
        // If we display the thumbnail in the teaser, we use either a very low
        // or a very high weight for displaying the thumbnail respectively before
        // or after the teaser body
        $display = variable_get('teaserimage_teaser_' . $node->type, 1);
        if ($display) {
          // Define atrributes
          $attributes = array('class' => 'teaserimage');
          $align = variable_get('teaserimage_align_' . $node->type, 0);
          if ($align) {
            $attributes['align'] = ($align == 1) ? 'left' : 'right';
          }
          // Build the thumbnail
          $thumbnail = theme('teaserimage_thumbnail', array('node' => $node, 'attributes' => $attributes));
          if (variable_get('teaserimage_link_' . $node->type, 1)) {
            $thumbnail = l($thumbnail, 'node/' . $node->nid, array('html' => TRUE));
          }
          $node->content['teaserimage'] = array(
            '#markup' => $thumbnail,
            '#weight' => ($display == 1) ? -50 : 50,
          );
          // We then remove media (both flash and pictures) from the teaser
          $body = _teaserimage_strip_media($body);
        }
        break;

      case 'rss':
        // If we display the thumbnail in the RSS feed
        $display = variable_get('teaserimage_rss_' . $node->type, 1);
        if ($display) {
          // Define atrributes
          $attributes = array('class' => 'teaserimage');
          $align = variable_get('teaserimage_align_' . $node->type, 0);
          if ($align) {
            $attributes['align'] = ($align == 1) ? 'left' : 'right';
          }
          // Build the thumbnail
          $thumbnail = theme('teaserimage_thumbnail', array('node' => $node, 'attributes' => $attributes));
          if (variable_get('teaserimage_link_' . $node->type, 1)) {
            $thumbnail = l($thumbnail, 'node/' . $node->nid, array('html' => TRUE));
          }
          // We then remove media (both flash and pictures) from the teaser/body
          // and append/prepend the thumbnail
          $body = ($display) ? $thumbnail . _teaserimage_strip_media($body) : $body;
        }
        break;
    }
  }
}

/**
 * Retrieve all the URL of local pictures in a HTML string (i.e. <img> with a
 * relative path).
 */
function _teaserimage_get_local_images($text) {
  $pattern = '/<img[^>]+src="([^"]+)/i';
  $matches = array();
  $local_pics = array();
  if (preg_match_all($pattern, $text, $matches)) {
    // The possible URLs for the current host
    $host = array(
      '(https?\:)?\/\/' . preg_quote($_SERVER['SERVER_NAME']) . '\/',
      '(https?\:)?\/\/' . preg_quote($_SERVER['HTTP_HOST']) . '\/',
    );
    $pattern = '/' . implode('|', $host) . '/i';
    foreach ($matches[1] as $url) {
      // We strip the host address form the url (we want relative paths)
      $url = preg_replace($pattern, '/', $url);
      // If it is a local file
      if ($url != '' && !strstr($url, 'mailto:') && $url[0] != '#' && !strstr($url, '://')) {
        $local_pics[] = $url;
      }
    }
  }
  return $local_pics;
}

// We retrieve the mininum size for a picture to be considered suitable
function _teaserimage_get_min_sizes($node) {
  $sizes = array();
  $min_height = variable_get('teaserimage_min_height_' . $node->type, '');
  if (empty($min_height)) {
    $min_height = variable_get('teaserimage_min_height', '');
  }
  if (empty($min_height)) {
    $min_height = 0;
  }
  $min_width = variable_get('teaserimage_min_width_' . $node->type, '');
  if (empty($min_width)) {
    $min_width = variable_get('teaserimage_min_width', '');
  }
  if (empty($min_width)) {
    $min_width = 0;
  }
  $sizes['min_height'] = $min_height;
  $sizes['min_width'] = $min_width;
  return $sizes;
}

function _teaserimage_get_thumbnail_from_attach($node) {
  $thumbnail = '';
  $files = array();
  $query = db_select('file_managed', 'fm');
  $query->innerJoin('file_usage', 'fu', 'fm.fid = fu.fid');
  $query->fields('fm');
  $query->condition('fu.id', $node->nid);
  $query->condition('fm.status', 1);
  $files = $query->execute();

  if (!empty($files)) {
    $min_size = _teaserimage_get_min_sizes($node);
    foreach ($files as $file) {
      $image_info = image_get_info($file->uri);
      if ($image_info) {
        // We check for minimum width and height
        if (($image_info['width'] >= $min_size['min_width']) && ($image_info['height'] >= $min_size['min_height'])) {
          $thumbnail = $file->uri;
        }
      }
      if (!empty($thumbnail)) {
        _teaserimage_save_thumb($node->nid, $thumbnail, 1);
        break;
      }
    }
  }
  return $thumbnail;
}

/**
 * Retrieve the filepath of the picture used for building the thumbnail
 */
function _teaserimage_get_thumbnail_source($node) {
  $thumbnail = db_query("SELECT filepath FROM {teaserimage} WHERE nid = :nid", array(':nid' => $node->nid))->fetchField();
  if (empty($thumbnail)) {
    $thumbnail = _teaserimage_process($node);
    // Look in the imagefield if necessary and if possible
    if (empty($thumbnail) && module_exists('file') && variable_get('teaserimage_imagefield_' . $node->type, 0)) {
      $thumbnail = _teaserimage_get_thumbnail_from_attach($node);
    }
  }
  return $thumbnail;
}

/**
 * Process a node on submit: find if there is a valid picture for building a
 * thumbnail and stores a reference to it.
 */
function _teaserimage_process($node) {
  $body = field_get_items('node', $node, 'body');
  $field = isset($body[0]['safe_value']) ? $body[0]['safe_value'] : check_markup($body[0]['value'], $body[0]['format']);
  // Retrieve the local pictures
  $local_pics = _teaserimage_get_local_images($field);

  if (count($local_pics)) {
    $min_size = _teaserimage_get_min_sizes($node);
    // Browse the array until we find a valid local file with the right dimensions
    $i = 0;
    do {
      // Ensure we have a relative path (we remove the base path from the beginning of the path)
      $pattern = "/^" . str_replace('/', '\/', base_path()) . "(.*)$/";
      $relative_path = preg_replace($pattern, "$1", $local_pics[$i]);

      if (file_exists($relative_path)) {
        // Check that it is a picture
        $image_info = image_get_info($relative_path);
        if ($image_info) {
          // Check for minimum width and height
          if (($image_info['width'] >= $min_size['min_width']) && ($image_info['height'] >= $min_size['min_height'])) {
            _teaserimage_save_thumb($node->nid, $relative_path);
            return;
          }
        }
      }
      $i++;
    } while ($i < count($local_pics));
  }
  else {
    _teaserimage_delete_thumb($node->nid);
  }
}

/**
 * Save a reference to the picture selected to build the thumbnail in the db.
 */
function _teaserimage_save_thumb($nid, $filepath, $from_attach = 0) {
  $file_dir_path = variable_get('file_' . file_default_scheme() . '_path', conf_path() . '/files');
  $filepath_relative = str_replace($file_dir_path, '', $filepath, $count);
  $filepath = $count ? file_build_uri($filepath_relative) : $filepath;

  $num_rows = db_query("SELECT count(*) FROM {teaserimage} WHERE nid = :nid", array(':nid' => $nid))->fetchField();
  if ($num_rows) {
    db_update('teaserimage')->fields(array(
        'filepath' => $filepath,
        'from_attach' => $from_attach,
      ))->condition('nid', $nid)->execute();
  }
  else {
    db_insert('teaserimage')->fields(array(
        'nid' => $nid,
        'filepath' => $filepath,
        'from_attach' => $from_attach,
      ))->execute();
  }
}

/**
 * Remove media (<img> and <object>) from a string.
 */
function _teaserimage_strip_media($string) {
  // We remove all the pictures from the text
  $img_pattern = "/<img[^>]+src=\"[^\"]+\"[^>]*>/i";
  $string = preg_replace($img_pattern, '', $string);

  // We now remove the object blocks (video, flash)
  $object_pattern = "/<object[0-9 a-z_?*=\":\-\/\.#\,<>\\n\\r\\t]+<\/object>/smi";
  $string = preg_replace($object_pattern, '', $string);

  return $string;
}

/**
 * Implements hook_views_api().
 *
 * @return Array with Views API version.
 */
function teaserimage_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'teaserimage') . '/views',
  );
}
